{
    "sourceFile": "src/PublicHelpers.jl",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1626566146328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1626566206726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,7 +51,7 @@\n     chain_index::AbstractVector{<:Integer}=_assume_one_chain(samples),\n     kwargs...\n )\n     samples = _convert_to_array(samples, chain_index)\n-    return pointwise_log_likelihoods(ll_fun, samples, ; kwargs...)\n+    return pointwise_log_likelihoods(ll_fun, samples, data; kwargs...)\n end\n \n"
                },
                {
                    "date": 1626566424482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n     _, n_posterior, n_chains = size(samples)\n     n_data = length(data)  # First index will represent data, not parameters.\n     pointwise_lls = similar(samples, n_data, n_posterior, n_chains)\n     @tullio pointwise_lls[datum, iteration, chain] = \n-        fun(samples[:, iteration, chain], data[datum])\n+        fun(samples[1, iteration, chain], data[datum])\n     return pointwise_lls\n end\n \n \n"
                },
                {
                    "date": 1626566787940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,10 +37,12 @@\n     end\n     _, n_posterior, n_chains = size(samples)\n     n_data = length(data)  # First index will represent data, not parameters.\n     pointwise_lls = similar(samples, n_data, n_posterior, n_chains)\n-    @tullio pointwise_lls[datum, iteration, chain] = \n-        fun(samples[1, iteration, chain], data[datum])\n+    @tturbo for (datum, iteration, chain) in CartesianIndices(pointwise_lls)\n+        pointwise_lls[datum, iteration, chain] = \n+            fun(samples[:, iteration, chain], data[datum])\n+    end\n     return pointwise_lls\n end\n \n \n"
                },
                {
                    "date": 1626566907405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     end\n     _, n_posterior, n_chains = size(samples)\n     n_data = length(data)  # First index will represent data, not parameters.\n     pointwise_lls = similar(samples, n_data, n_posterior, n_chains)\n-    @tturbo for (datum, iteration, chain) in CartesianIndices(pointwise_lls)\n+    for (datum, iteration, chain) in CartesianIndices(pointwise_lls)\n         pointwise_lls[datum, iteration, chain] = \n             fun(samples[:, iteration, chain], data[datum])\n     end\n     return pointwise_lls\n"
                },
                {
                    "date": 1626568571188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,10 @@\n     end\n     _, n_posterior, n_chains = size(samples)\n     n_data = length(data)  # First index will represent data, not parameters.\n     pointwise_lls = similar(samples, n_data, n_posterior, n_chains)\n-    for (datum, iteration, chain) in CartesianIndices(pointwise_lls)\n+    for index in CartesianIndices(pointwise_lls)\n+        datum, iteration, chain = index\n         pointwise_lls[datum, iteration, chain] = \n             fun(samples[:, iteration, chain], data[datum])\n     end\n     return pointwise_lls\n"
                },
                {
                    "date": 1626568576436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     end\n     _, n_posterior, n_chains = size(samples)\n     n_data = length(data)  # First index will represent data, not parameters.\n     pointwise_lls = similar(samples, n_data, n_posterior, n_chains)\n-    for index in CartesianIndices(pointwise_lls)\n+    @tturbo for index in CartesianIndices(pointwise_lls)\n         datum, iteration, chain = index\n         pointwise_lls[datum, iteration, chain] = \n             fun(samples[:, iteration, chain], data[datum])\n     end\n"
                },
                {
                    "date": 1626568651463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     end\n     _, n_posterior, n_chains = size(samples)\n     n_data = length(data)  # First index will represent data, not parameters.\n     pointwise_lls = similar(samples, n_data, n_posterior, n_chains)\n-    @tturbo for index in CartesianIndices(pointwise_lls)\n+    for index in CartesianIndices(pointwise_lls)\n         datum, iteration, chain = index\n         pointwise_lls[datum, iteration, chain] = \n             fun(samples[:, iteration, chain], data[datum])\n     end\n"
                },
                {
                    "date": 1626568811147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,10 +37,9 @@\n     end\n     _, n_posterior, n_chains = size(samples)\n     n_data = length(data)  # First index will represent data, not parameters.\n     pointwise_lls = similar(samples, n_data, n_posterior, n_chains)\n-    for index in CartesianIndices(pointwise_lls)\n-        datum, iteration, chain = index\n+    @tturbo for (datum, iteration, chain) in Tuple(CartesianIndices(pointwise_lls))\n         pointwise_lls[datum, iteration, chain] = \n             fun(samples[:, iteration, chain], data[datum])\n     end\n     return pointwise_lls\n"
                },
                {
                    "date": 1626568858024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     end\n     _, n_posterior, n_chains = size(samples)\n     n_data = length(data)  # First index will represent data, not parameters.\n     pointwise_lls = similar(samples, n_data, n_posterior, n_chains)\n-    @tturbo for (datum, iteration, chain) in Tuple(CartesianIndices(pointwise_lls))\n+    for (datum, iteration, chain) in Tuple(CartesianIndices(pointwise_lls))\n         pointwise_lls[datum, iteration, chain] = \n             fun(samples[:, iteration, chain], data[datum])\n     end\n     return pointwise_lls\n"
                },
                {
                    "date": 1626568944332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,10 @@\n     end\n     _, n_posterior, n_chains = size(samples)\n     n_data = length(data)  # First index will represent data, not parameters.\n     pointwise_lls = similar(samples, n_data, n_posterior, n_chains)\n-    for (datum, iteration, chain) in Tuple(CartesianIndices(pointwise_lls))\n+    for index in CartesianIndices(pointwise_lls)\n+        datum, iteration, chain = Tuple(index)\n         pointwise_lls[datum, iteration, chain] = \n             fun(samples[:, iteration, chain], data[datum])\n     end\n     return pointwise_lls\n"
                }
            ],
            "date": 1626566146328,
            "name": "Commit-0",
            "content": "export pointwise_log_likelihoods\n\n\"\"\"\n    pointwise_log_likelihoods(\n        ll_fun::Function, \n        samples::AbstractArray{<:AstractFloat,3}, \n        data;\n        splat::Bool=true,\n        turbo=true\n    ) \n\nCompute the pointwise log likelihood.\n\n# Arguments\n  - `ll_fun::Function`: a function of the form `f(θ[1], ..., θ[n], data)`, where `θ` is the\n    parameter vector. See also the `splat` keyword argument.\n  - `samples::AbstractArray`: A three dimensional array of MCMC samples. Here, the first\n    dimension should indicate the parameter being sampled; the second dimension should\n    indicate the iteration of the MCMC ; and the third dimension represents the chains. \n  - `data`: A vector of data used to estimate the parameters of the model.\n  - `splat`: If `true` (default), `f` must be a function of `n` different parameters. \n    Otherwise, `f` is assumed to be a function of a single parameter vector.\n\n# Returns\n  - `Array`: a three dimensional array of pointwise log-likelihoods.\n\"\"\"\nfunction pointwise_log_likelihoods(\n    ll_fun::Function, \n    samples::AbstractArray{<:AbstractFloat, 3}, \n    data;\n    splat::Bool=true\n)\n    if splat \n        fun = (p, d) -> ll_fun(p..., d)\n    else\n        fun = (p, d) -> ll_fun(p, d)\n    end\n    _, n_posterior, n_chains = size(samples)\n    n_data = length(data)  # First index will represent data, not parameters.\n    pointwise_lls = similar(samples, n_data, n_posterior, n_chains)\n    @tullio pointwise_lls[datum, iteration, chain] = \n        fun(samples[:, iteration, chain], data[datum])\n    return pointwise_lls\nend\n\n\nfunction pointwise_log_likelihoods(\n    ll_fun::Function, \n    samples::AbstractMatrix{<:AbstractFloat}, \n    data;\n    chain_index::AbstractVector{<:Integer}=_assume_one_chain(samples),\n    kwargs...\n)\n    samples = _convert_to_array(samples, chain_index)\n    return pointwise_log_likelihoods(ll_fun, samples, ; kwargs...)\nend\n\n"
        }
    ]
}