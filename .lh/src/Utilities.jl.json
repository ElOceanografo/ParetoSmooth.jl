{
    "sourceFile": "src/Utilities.jl",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1626561710896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1626561905526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,20 +5,29 @@\n \n Computes the pointwise log likelihood.\n \n # Arguments\n-- `ll_fun::Function`: a function that computes the log likelihood of a single data point:\n-     f(θ1, ..., θn, data), where θi is the ith parameter\n-- `samples::AbstractArray{<:AstractFloat,3}`: a three dimensional array of mcmc samples \n+  - `ll_fun::Function`: a function of the form `f(θ_1, ..., θ_n, data)`, where `θ` is a\n+    vector of parameters. See also the `splat` keyword argument.\n+  - `samples::AbstractArray{<:AstractFloat,3}`: a three dimensional array of mcmc samples \n     where the first dimension represents the samples, the second dimension represents\n     the samples, and the third dimension represents the chains. \n-- `data`: a vector of data used to estimate parameters of the model \n+  - `data`: a vector of data used to estimate parameters of the model \n+  - `splat`: Whether the \n \n # Returns\n - `Array`: a three dimensional array of pointwise log-likelihoods.\n \"\"\"\n-function pointwise_log_likelihoods(ll_fun::Function, samples::AbstractArray{<:AbstractFloat,3}, data)\n-    fun = (p,d)-> ll_fun(p..., d)\n+function pointwise_log_likelihoods(\n+    ll_fun::Function, \n+    samples::AbstractArray{<:AbstractFloat,3}, \n+    data;\n+    splat=true\n+)\n+    if splat \n+        fun = (p,d)-> ll_fun(p..., d)\n+    else\n+        fun = (p,d)-> ll_fun()\n     n_data = length(data)\n     n_samples, _,n_chains = size(samples)\n     pointwise_lls = fill(0.0, n_data, n_samples, n_chains)\n     for c in 1:n_chains \n"
                },
                {
                    "date": 1626562121942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,35 +1,42 @@\n export pointwise_log_likelihoods\n \n \"\"\"\n-    pointwise_log_likelihoods(ll_fun::Function, samples::AbstractArray{<:AstractFloat,3}, data) \n+    pointwise_log_likelihoods(\n+        ll_fun::Function, \n+        samples::AbstractArray{<:AstractFloat,3}, \n+        data;\n+        splat::Bool=true\n+    ) \n \n-Computes the pointwise log likelihood.\n+Compute the pointwise log likelihood.\n \n # Arguments\n-  - `ll_fun::Function`: a function of the form `f(θ_1, ..., θ_n, data)`, where `θ` is a\n-    vector of parameters. See also the `splat` keyword argument.\n+  - `ll_fun::Function`: a function of the form `f(θ[1], ..., θ[n], data)`, where `θ` is the\n+    parameter vector. See also the `splat` keyword argument.\n   - `samples::AbstractArray{<:AstractFloat,3}`: a three dimensional array of mcmc samples \n     where the first dimension represents the samples, the second dimension represents\n     the samples, and the third dimension represents the chains. \n   - `data`: a vector of data used to estimate parameters of the model \n-  - `splat`: Whether the \n+  - `splat`: if `true` (default), `f` must be a function of `n` separate parameters. \n+  Otherwise, `f` is assumed to be a function of the parameter vector.\n \n # Returns\n - `Array`: a three dimensional array of pointwise log-likelihoods.\n \"\"\"\n function pointwise_log_likelihoods(\n     ll_fun::Function, \n     samples::AbstractArray{<:AbstractFloat,3}, \n     data;\n-    splat=true\n+    splat::Bool=true\n )\n     if splat \n         fun = (p,d)-> ll_fun(p..., d)\n     else\n-        fun = (p,d)-> ll_fun()\n+        fun = (p,d)-> ll_fun(p, d)\n+    end\n     n_data = length(data)\n-    n_samples, _,n_chains = size(samples)\n+    n_samples, _, n_chains = size(samples)\n     pointwise_lls = fill(0.0, n_data, n_samples, n_chains)\n     for c in 1:n_chains \n         for s in 1:n_samples\n             for d in 1:n_data\n"
                },
                {
                    "date": 1626562132250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     where the first dimension represents the samples, the second dimension represents\n     the samples, and the third dimension represents the chains. \n   - `data`: a vector of data used to estimate parameters of the model \n   - `splat`: if `true` (default), `f` must be a function of `n` separate parameters. \n-  Otherwise, `f` is assumed to be a function of the parameter vector.\n+  Otherwise, `f` is assumed to be a function of the parameter *vector*.\n \n # Returns\n - `Array`: a three dimensional array of pointwise log-likelihoods.\n \"\"\"\n"
                },
                {
                    "date": 1626562151119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     where the first dimension represents the samples, the second dimension represents\n     the samples, and the third dimension represents the chains. \n   - `data`: a vector of data used to estimate parameters of the model \n   - `splat`: if `true` (default), `f` must be a function of `n` separate parameters. \n-  Otherwise, `f` is assumed to be a function of the parameter *vector*.\n+  Otherwise, `f` is assumed to be a function of a single parameter vector.\n \n # Returns\n - `Array`: a three dimensional array of pointwise log-likelihoods.\n \"\"\"\n@@ -29,11 +29,11 @@\n     data;\n     splat::Bool=true\n )\n     if splat \n-        fun = (p,d)-> ll_fun(p..., d)\n+        fun = (p,d) -> ll_fun(p..., d)\n     else\n-        fun = (p,d)-> ll_fun(p, d)\n+        fun = (p,d) -> ll_fun(p, d)\n     end\n     n_data = length(data)\n     n_samples, _, n_chains = size(samples)\n     pointwise_lls = fill(0.0, n_data, n_samples, n_chains)\n"
                },
                {
                    "date": 1626562158955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   - `samples::AbstractArray{<:AstractFloat,3}`: a three dimensional array of mcmc samples \n     where the first dimension represents the samples, the second dimension represents\n     the samples, and the third dimension represents the chains. \n   - `data`: a vector of data used to estimate parameters of the model \n-  - `splat`: if `true` (default), `f` must be a function of `n` separate parameters. \n+  - `splat`: if `true` (default), `f` must be a function of `n` different parameters. \n   Otherwise, `f` is assumed to be a function of a single parameter vector.\n \n # Returns\n - `Array`: a three dimensional array of pointwise log-likelihoods.\n"
                },
                {
                    "date": 1626562474479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,10 +35,10 @@\n         fun = (p,d) -> ll_fun(p, d)\n     end\n     n_data = length(data)\n     n_samples, _, n_chains = size(samples)\n-    pointwise_lls = fill(0.0, n_data, n_samples, n_chains)\n-    for c in 1:n_chains \n+    pointwise_lls = similar(samples, n_data, n_samples, n_chains)\n+    @tturbo for c in 1:n_chains \n         for s in 1:n_samples\n             for d in 1:n_data\n                 pointwise_lls[d,s,c] = fun(samples[s,:,c], data[d])\n             end\n"
                },
                {
                    "date": 1626563745418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,22 +4,24 @@\n     pointwise_log_likelihoods(\n         ll_fun::Function, \n         samples::AbstractArray{<:AstractFloat,3}, \n         data;\n-        splat::Bool=true\n+        splat::Bool=true,\n+        turbo=true\n     ) \n \n Compute the pointwise log likelihood.\n \n # Arguments\n   - `ll_fun::Function`: a function of the form `f(θ[1], ..., θ[n], data)`, where `θ` is the\n     parameter vector. See also the `splat` keyword argument.\n-  - `samples::AbstractArray{<:AstractFloat,3}`: a three dimensional array of mcmc samples \n-    where the first dimension represents the samples, the second dimension represents\n-    the samples, and the third dimension represents the chains. \n-  - `data`: a vector of data used to estimate parameters of the model \n-  - `splat`: if `true` (default), `f` must be a function of `n` different parameters. \n-  Otherwise, `f` is assumed to be a function of a single parameter vector.\n+  - `samples::AbstractArray`: A three dimensional array of MCMC samples. Here, the first\n+    dimension should indicate the parameter being sampled; the second dimension should\n+    indicate the iteration of the MCMC ; and the third dimension represents the chains. \n+  - `data`: A vector of data used to estimate the parameters of the model.\n+  - `splat`: If `true` (default), `f` must be a function of `n` different parameters. \n+    Otherwise, `f` is assumed to be a function of a single parameter vector.\n+  - `turbo`: If `true` (default), use the `@tturbo` macro from \n \n # Returns\n - `Array`: a three dimensional array of pointwise log-likelihoods.\n \"\"\"\n@@ -29,20 +31,15 @@\n     data;\n     splat::Bool=true\n )\n     if splat \n-        fun = (p,d) -> ll_fun(p..., d)\n+        fun = (p, d) -> ll_fun(p..., d)\n     else\n-        fun = (p,d) -> ll_fun(p, d)\n+        fun = (p, d) -> ll_fun(p, d)\n     end\n-    n_data = length(data)\n-    n_samples, _, n_chains = size(samples)\n-    pointwise_lls = similar(samples, n_data, n_samples, n_chains)\n-    @tturbo for c in 1:n_chains \n-        for s in 1:n_samples\n-            for d in 1:n_data\n-                pointwise_lls[d,s,c] = fun(samples[s,:,c], data[d])\n-            end\n-        end\n-    end\n+    dims = size(samples)\n+    dims[1] = length(data)  # First index will represent data, not parameters.\n+    pointwise_lls = similar(samples, dims)\n+    @tullio pointwise_lls[datum, iteration, chain] = \n+        fun(samples[:, iteration, chain], data[datum])\n     return pointwise_lls\n end\n\\ No newline at end of file\n"
                },
                {
                    "date": 1626563942541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,8 @@\n     indicate the iteration of the MCMC ; and the third dimension represents the chains. \n   - `data`: A vector of data used to estimate the parameters of the model.\n   - `splat`: If `true` (default), `f` must be a function of `n` different parameters. \n     Otherwise, `f` is assumed to be a function of a single parameter vector.\n-  - `turbo`: If `true` (default), use the `@tturbo` macro from \n \n # Returns\n - `Array`: a three dimensional array of pointwise log-likelihoods.\n \"\"\"\n"
                },
                {
                    "date": 1626565081269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,24 +21,46 @@\n   - `splat`: If `true` (default), `f` must be a function of `n` different parameters. \n     Otherwise, `f` is assumed to be a function of a single parameter vector.\n \n # Returns\n-- `Array`: a three dimensional array of pointwise log-likelihoods.\n+  - `Array`: a three dimensional array of pointwise log-likelihoods.\n \"\"\"\n function pointwise_log_likelihoods(\n     ll_fun::Function, \n-    samples::AbstractArray{<:AbstractFloat,3}, \n+    samples::AbstractArray{<:AbstractFloat, 3}, \n     data;\n     splat::Bool=true\n )\n     if splat \n         fun = (p, d) -> ll_fun(p..., d)\n     else\n         fun = (p, d) -> ll_fun(p, d)\n     end\n-    dims = size(samples)\n+    dims = [0, 0, 0]\n+    _, dims[1] = size(samples)\n     dims[1] = length(data)  # First index will represent data, not parameters.\n-    pointwise_lls = similar(samples, dims)\n+    pointwise_lls = similar(samples, size(samples, 2), size(samples, 2))\n     @tullio pointwise_lls[datum, iteration, chain] = \n         fun(samples[:, iteration, chain], data[datum])\n     return pointwise_lls\n+end\n+\n+\n+function pointwise_log_likelihoods(\n+    ll_fun::Function, \n+    samples::AbstractArray{<:AbstractFloat, 3}, \n+    data;\n+    splat::Bool=true\n+)\n+    if splat \n+        fun = (p, d) -> ll_fun(p..., d)\n+    else\n+        fun = (p, d) -> ll_fun(p, d)\n+    end\n+    dims = [0, 0, 0]\n+    _, dims[1] = size(samples)\n+    dims[1] = length(data)  # First index will represent data, not parameters.\n+    pointwise_lls = similar(samples, size(samples, 2), size(samples, 2))\n+    @tullio pointwise_lls[datum, iteration, chain] = \n+        fun(samples[:, iteration, chain], data[datum])\n+    return pointwise_lls\n end\n\\ No newline at end of file\n"
                }
            ],
            "date": 1626561710896,
            "name": "Commit-0",
            "content": "export pointwise_log_likelihoods\n\n\"\"\"\n    pointwise_log_likelihoods(ll_fun::Function, samples::AbstractArray{<:AstractFloat,3}, data) \n\nComputes the pointwise log likelihood.\n\n# Arguments\n- `ll_fun::Function`: a function that computes the log likelihood of a single data point:\n     f(θ1, ..., θn, data), where θi is the ith parameter\n- `samples::AbstractArray{<:AstractFloat,3}`: a three dimensional array of mcmc samples \n    where the first dimension represents the samples, the second dimension represents\n    the samples, and the third dimension represents the chains. \n- `data`: a vector of data used to estimate parameters of the model \n\n# Returns\n- `Array`: a three dimensional array of pointwise log-likelihoods.\n\"\"\"\nfunction pointwise_log_likelihoods(ll_fun::Function, samples::AbstractArray{<:AbstractFloat,3}, data)\n    fun = (p,d)-> ll_fun(p..., d)\n    n_data = length(data)\n    n_samples, _,n_chains = size(samples)\n    pointwise_lls = fill(0.0, n_data, n_samples, n_chains)\n    for c in 1:n_chains \n        for s in 1:n_samples\n            for d in 1:n_data\n                pointwise_lls[d,s,c] = fun(samples[s,:,c], data[d])\n            end\n        end\n    end\n    return pointwise_lls\nend"
        }
    ]
}