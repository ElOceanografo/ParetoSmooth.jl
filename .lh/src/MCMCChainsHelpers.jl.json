{
    "sourceFile": "src/MCMCChainsHelpers.jl",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1626630724221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1626630771715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,9 @@\n independent. Currently permitted values are $SAMPLE_SOURCES.\n - `log_weights::Bool=false`: Return log weights, rather than the PSIS weights. \n \"\"\"\n function psis(\n-    ll_fun::Function, chain::Chains, r_eff;\n+    ll_fun::Function, chain::Chains, data, r_eff;\n     source::Union{AbstractString,Symbol}=\"mcmc\", log_weights::Bool=false\n     )\n     pointwise_log_likes = pointwise_log_likelihoods(ll_fun, chain, data)\n     return psis(-pointwise_log_likes, r_eff; source, log_weights)\n"
                },
                {
                    "date": 1626630886370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,37 +63,17 @@\n Implements Pareto-smoothed importance sampling (PSIS) based on MCMCChain object.\n \n # Arguments\n ## Positional Arguments\n-- `ll_fun::Function`: a function that computes the log likelihood of a single data point: \n-f(θ1, ..., θn, data), where θi is the ith parameter\n-- `chain::Chain`: a chain object from MCMCChains\n-- `data`: a vector of data used to estimate parameters of the model\n-- `r_eff::AbstractArray{T}`: An (optional) vector of relative effective sample sizes used \n-in ESS calculations. If left empty, calculated automatically using the FFTESS method \n-from InferenceDiagnostics.jl. See `relative_eff` to calculate these values. \n-\n-## Keyword Arguments\n-\n-- `chain_index::Vector{Integer}`: An (optional) vector of integers indicating which chain \n-each sample belongs to.\n-- `source::String=\"mcmc\"`: A string or symbol describing the source of the sample being \n-used. If `\"mcmc\"`, adjusts ESS for autocorrelation. Otherwise, samples are assumed to be \n-independent. Currently permitted values are $SAMPLE_SOURCES.\n-- `log_weights::Bool=false`: Return log weights, rather than the PSIS weights. \n+  - `ll_fun::Function`: a function that computes the log likelihood of a single data point: \n+    f(θ1, ..., θn, data), where θi is the ith parameter\n+  - `chain::Chain`: a chain object from MCMCChains\n+  - `data`: a vector of data used to estimate parameters of the model\n+  - $ARGS [`psis`](@ref).\n+  - $KWARGS [`psis`](@ref).\n+  \n+See also: [`psis`](@ref), [`loo`](@ref), [`PsisLoo`](@ref).\n \"\"\"\n-function psis(\n-    ll_fun::Function, chain::Chains, data, r_eff;\n-    source::Union{AbstractString,Symbol}=\"mcmc\", log_weights::Bool=false\n-    )\n+function psis(ll_fun::Function, chain::Chains, data, args...; kwargs...)\n     pointwise_log_likes = pointwise_log_likelihoods(ll_fun, chain, data)\n-    return psis(-pointwise_log_likes, r_eff; source, log_weights)\n-end\n-\n-function psis(\n-    ll_fun::Function, chain::Chains, data;\n-    source::Union{AbstractString,Symbol}=\"mcmc\", log_weights::Bool=false\n-    )\n-    pointwise_log_likes = pointwise_log_likelihoods(ll_fun, chain, data)\n-    r_eff = similar(pointwise_log_likes, 0)\n-    return psis(-pointwise_log_likes, r_eff; source, log_weights)\n-end\n+    return psis(-pointwise_log_likes, r_eff, args...; kwargs...)\n+end\n\\ No newline at end of file\n"
                },
                {
                    "date": 1626630949002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,15 +51,9 @@\n     return psis_loo(pointwise_log_likes, args...; source, log_weights, kwargs...)\n end\n \n \"\"\"\n-    psis(\n-        ll_fun::Function, \n-        chain::Chains,\n-        data; \n-        source::String=\"mcmc\", \n-        log_weights::Bool=false\n-    ) -> Psis\n+    psis(ll_fun::Function, chain::Chains, data[, kwargs...; args...) -> Psis\n \n Implements Pareto-smoothed importance sampling (PSIS) based on MCMCChain object.\n \n # Arguments\n@@ -69,9 +63,9 @@\n   - `chain::Chain`: a chain object from MCMCChains\n   - `data`: a vector of data used to estimate parameters of the model\n   - $ARGS [`psis`](@ref).\n   - $KWARGS [`psis`](@ref).\n-  \n+\n See also: [`psis`](@ref), [`loo`](@ref), [`PsisLoo`](@ref).\n \"\"\"\n function psis(ll_fun::Function, chain::Chains, data, args...; kwargs...)\n     pointwise_log_likes = pointwise_log_likelihoods(ll_fun, chain, data)\n"
                },
                {
                    "date": 1626630989737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,13 +43,12 @@\n \n See also: [`psis`](@ref), [`loo`](@ref), [`PsisLoo`](@ref).\n \"\"\"\n function psis_loo(\n-    ll_fun::Function, chain::Chains, data, args...;\n-    source::Union{AbstractString,Symbol}=\"mcmc\", log_weights::Bool=false, kwargs...\n+    ll_fun::Function, chain::Chains, data, args...; kwargs...\n     )\n     pointwise_log_likes = pointwise_log_likelihoods(ll_fun, chain, data)\n-    return psis_loo(pointwise_log_likes, args...; source, log_weights, kwargs...)\n+    return psis_loo(pointwise_log_likes, args...; kwargs...)\n end\n \n \"\"\"\n     psis(ll_fun::Function, chain::Chains, data[, kwargs...; args...) -> Psis\n@@ -68,6 +67,6 @@\n See also: [`psis`](@ref), [`loo`](@ref), [`PsisLoo`](@ref).\n \"\"\"\n function psis(ll_fun::Function, chain::Chains, data, args...; kwargs...)\n     pointwise_log_likes = pointwise_log_likelihoods(ll_fun, chain, data)\n-    return psis(-pointwise_log_likes, r_eff, args...; kwargs...)\n+    return psis(-pointwise_log_likes, args...; kwargs...)\n end\n\\ No newline at end of file\n"
                },
                {
                    "date": 1626631000760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,10 +43,9 @@\n \n See also: [`psis`](@ref), [`loo`](@ref), [`PsisLoo`](@ref).\n \"\"\"\n function psis_loo(\n-    ll_fun::Function, chain::Chains, data, args...; kwargs...\n-    )\n+    ll_fun::Function, chain::Chains, data, args...; kwargs...)\n     pointwise_log_likes = pointwise_log_likelihoods(ll_fun, chain, data)\n     return psis_loo(pointwise_log_likes, args...; kwargs...)\n end\n \n"
                },
                {
                    "date": 1626631059315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,15 +34,12 @@\n   - `ll_fun::Function`: a function that computes the log likelihood of a single data point: \n     f(θ1, ..., θn, data), where θi is the ith parameter\n   - `chain::Chain`: a chain object from MCMCChains\n   - `data`: a vector of data used to estimate parameters of the model\n-  - `args...`: Positional arguments to be passed to [`psis`](@ref).\n-  - `chain_index::Vector`: A vector of integers specifying which chain each iteration belongs to. For\n-    instance, `chain_index[iteration]` should return `2` if `log_likelihood[:, step]`\n-    belongs to the second chain.\n-  - `kwargs...`: Keyword arguments to be passed to [`psis`](@ref).\n+  - $ARGS [`psis_loo`](@ref).\n+  - $KWARGS [`psis_loo`](@ref).\n \n-See also: [`psis`](@ref), [`loo`](@ref), [`PsisLoo`](@ref).\n+See also: [`psis_loo`](@ref), [`loo`](@ref), [`PsisLoo`](@ref).\n \"\"\"\n function psis_loo(\n     ll_fun::Function, chain::Chains, data, args...; kwargs...)\n     pointwise_log_likes = pointwise_log_likelihoods(ll_fun, chain, data)\n@@ -62,9 +59,9 @@\n   - `data`: a vector of data used to estimate parameters of the model\n   - $ARGS [`psis`](@ref).\n   - $KWARGS [`psis`](@ref).\n \n-See also: [`psis`](@ref), [`loo`](@ref), [`PsisLoo`](@ref).\n+See also: [`psis`](@ref), [`psis_loo`](@ref), [`PsisLoo`](@ref).\n \"\"\"\n function psis(ll_fun::Function, chain::Chains, data, args...; kwargs...)\n     pointwise_log_likes = pointwise_log_likelihoods(ll_fun, chain, data)\n     return psis(-pointwise_log_likes, args...; kwargs...)\n"
                },
                {
                    "date": 1626634484769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,39 +1,41 @@\n using .MCMCChains\n export pointwise_log_likelihoods\n \n \"\"\"\n-    pointwise_log_likelihoods(ll_fun::Function, chain::Chains, data)\n+    pointwise_log_likelihoods(ll_fun::Function, chains::Chains, data)\n \n-Computes the pointwise log likelihoods where [d,s,c] corresponds to log likelihood of \n-evaluated at datapoint d, sample s, for chain c. \n+Compute the pointwise log likelihoods.\n \n # Arguments\n-- `ll_fun::Function`: a function that computes the log likelihood of a single data point: \n-    f(θ1, ..., θn, data), where θi is the ith parameter\n-- `chain::Chain`: a chain object from MCMCChains\n-- `data`: a vector of data used to estimate parameters of the model\n+  - $LIKELIHOOD_FUNCTION_ARG\n+  - `chain::Chains`: A chain object from MCMCChains.\n+  - `data`: An array of data points used to estimate the parameters of the model.\n \n # Returns\n-- `Array{Float64,3}`: a three dimensional array of pointwise log likelihoods \n+  - `Array`: a three dimensional array of pointwise log-likelihoods. Indices are ordered as\n+    `[data, step, chain]`.\n \"\"\"\n function pointwise_log_likelihoods(ll_fun::Function, chain::Chains, data)\n     samples = Array(Chains(chain, :parameters).value)\n     pointwise_log_likelihoods(ll_fun, samples, data)\n end\n \n \"\"\"\n-    function psis_loo(ll_fun::Function, chain::Chains, data, args...;\n-        source::String=\"mcmc\" [, chain_index::Vector{Int}, kwargs...]\n+    function psis_loo(\n+        ll_fun::Function, \n+        chain::Chains, \n+        data, \n+        args...; \n+        kwargs...\n     ) -> PsisLoo\n \n Use Pareto-Smoothed Importance Sampling to calculate the leave-one-out cross validation\n-score based on MCMCChain.\n+score from an MCMCChains object.\n \n # Arguments\n \n-  - `ll_fun::Function`: a function that computes the log likelihood of a single data point: \n-    f(θ1, ..., θn, data), where θi is the ith parameter\n+  - $LIKELIHOOD_FUNCTION_ARG\n   - `chain::Chain`: a chain object from MCMCChains\n   - `data`: a vector of data used to estimate parameters of the model\n   - $ARGS [`psis_loo`](@ref).\n   - $KWARGS [`psis_loo`](@ref).\n@@ -52,11 +54,10 @@\n Implements Pareto-smoothed importance sampling (PSIS) based on MCMCChain object.\n \n # Arguments\n ## Positional Arguments\n-  - `ll_fun::Function`: a function that computes the log likelihood of a single data point: \n-    f(θ1, ..., θn, data), where θi is the ith parameter\n-  - `chain::Chain`: a chain object from MCMCChains\n+  - $LIKELIHOOD_FUNCTION_ARG\n+  - $CHAIN\n   - `data`: a vector of data used to estimate parameters of the model\n   - $ARGS [`psis`](@ref).\n   - $KWARGS [`psis`](@ref).\n \n"
                },
                {
                    "date": 1626634593269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,10 +34,10 @@\n \n # Arguments\n \n   - $LIKELIHOOD_FUNCTION_ARG\n-  - `chain::Chain`: a chain object from MCMCChains\n-  - `data`: a vector of data used to estimate parameters of the model\n+  - `chain::Chain`: A chain object from MCMCChains.\n+  - `data`: A vector of data points used to estimate the parameters of the model.\n   - $ARGS [`psis_loo`](@ref).\n   - $KWARGS [`psis_loo`](@ref).\n \n See also: [`psis_loo`](@ref), [`loo`](@ref), [`PsisLoo`](@ref).\n@@ -53,12 +53,11 @@\n \n Implements Pareto-smoothed importance sampling (PSIS) based on MCMCChain object.\n \n # Arguments\n-## Positional Arguments\n   - $LIKELIHOOD_FUNCTION_ARG\n   - $CHAIN\n-  - `data`: a vector of data used to estimate parameters of the model\n+  - `data`: A vector of data points used to estimate the parameters of the model.\n   - $ARGS [`psis`](@ref).\n   - $KWARGS [`psis`](@ref).\n \n See also: [`psis`](@ref), [`psis_loo`](@ref), [`PsisLoo`](@ref).\n"
                },
                {
                    "date": 1626634646547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,10 +53,11 @@\n \n Implements Pareto-smoothed importance sampling (PSIS) based on MCMCChain object.\n \n # Arguments\n+\n   - $LIKELIHOOD_FUNCTION_ARG\n-  - $CHAIN\n+  - chain::Chain`: A chain object from MCMCChains.\n   - `data`: A vector of data points used to estimate the parameters of the model.\n   - $ARGS [`psis`](@ref).\n   - $KWARGS [`psis`](@ref).\n \n"
                },
                {
                    "date": 1626635014040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,12 +11,12 @@\n   - `chain::Chains`: A chain object from MCMCChains.\n   - `data`: An array of data points used to estimate the parameters of the model.\n \n # Returns\n-  - `Array`: a three dimensional array of pointwise log-likelihoods. Indices are ordered as\n-    `[data, step, chain]`.\n+  - `Array`: a three dimensional array of pointwise log-likelihoods. Dimensions are ordered\n+    as `[data, step, chain]`.\n \"\"\"\n-function pointwise_log_likelihoods(ll_fun::Function, chain::Chains, data)\n+function pointwise_log_likelihoods(ll_fun::Function, chain::Chains, data::AbstractVector)\n     samples = Array(Chains(chain, :parameters).value)\n     pointwise_log_likelihoods(ll_fun, samples, data)\n end\n \n@@ -42,9 +42,9 @@\n \n See also: [`psis_loo`](@ref), [`loo`](@ref), [`PsisLoo`](@ref).\n \"\"\"\n function psis_loo(\n-    ll_fun::Function, chain::Chains, data, args...; kwargs...)\n+    ll_fun::Function, chain::Chains, data::AbstractVector, args...; kwargs...)\n     pointwise_log_likes = pointwise_log_likelihoods(ll_fun, chain, data)\n     return psis_loo(pointwise_log_likes, args...; kwargs...)\n end\n \n@@ -62,8 +62,8 @@\n   - $KWARGS [`psis`](@ref).\n \n See also: [`psis`](@ref), [`psis_loo`](@ref), [`PsisLoo`](@ref).\n \"\"\"\n-function psis(ll_fun::Function, chain::Chains, data, args...; kwargs...)\n+function psis(ll_fun::Function, chain::Chains, data::AbstractVector, args...; kwargs...)\n     pointwise_log_likes = pointwise_log_likelihoods(ll_fun, chain, data)\n     return psis(-pointwise_log_likes, args...; kwargs...)\n end\n\\ No newline at end of file\n"
                },
                {
                    "date": 1626636001504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n \n # Arguments\n \n   - $LIKELIHOOD_FUNCTION_ARG\n-  - chain::Chain`: A chain object from MCMCChains.\n+  - `chain::Chain`: A chain object from MCMCChains.\n   - `data`: A vector of data points used to estimate the parameters of the model.\n   - $ARGS [`psis`](@ref).\n   - $KWARGS [`psis`](@ref).\n \n"
                },
                {
                    "date": 1626977130141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,10 +41,9 @@\n   - $KWARGS [`psis_loo`](@ref).\n \n See also: [`psis_loo`](@ref), [`loo`](@ref), [`PsisLoo`](@ref).\n \"\"\"\n-function psis_loo(\n-    ll_fun::Function, chain::Chains, data::AbstractVector, args...; kwargs...)\n+function psis_loo(ll_fun::Function, chain::Chains, data::AbstractVector, args...; kwargs...)\n     pointwise_log_likes = pointwise_log_likelihoods(ll_fun, chain, data)\n     return psis_loo(pointwise_log_likes, args...; kwargs...)\n end\n \n"
                }
            ],
            "date": 1626630724221,
            "name": "Commit-0",
            "content": "using .MCMCChains\nexport pointwise_log_likelihoods\n\n\"\"\"\n    pointwise_log_likelihoods(ll_fun::Function, chain::Chains, data)\n\nComputes the pointwise log likelihoods where [d,s,c] corresponds to log likelihood of \nevaluated at datapoint d, sample s, for chain c. \n\n# Arguments\n- `ll_fun::Function`: a function that computes the log likelihood of a single data point: \n    f(θ1, ..., θn, data), where θi is the ith parameter\n- `chain::Chain`: a chain object from MCMCChains\n- `data`: a vector of data used to estimate parameters of the model\n\n# Returns\n- `Array{Float64,3}`: a three dimensional array of pointwise log likelihoods \n\"\"\"\nfunction pointwise_log_likelihoods(ll_fun::Function, chain::Chains, data)\n    samples = Array(Chains(chain, :parameters).value)\n    pointwise_log_likelihoods(ll_fun, samples, data)\nend\n\n\"\"\"\n    function psis_loo(ll_fun::Function, chain::Chains, data, args...;\n        source::String=\"mcmc\" [, chain_index::Vector{Int}, kwargs...]\n    ) -> PsisLoo\n\nUse Pareto-Smoothed Importance Sampling to calculate the leave-one-out cross validation\nscore based on MCMCChain.\n\n# Arguments\n\n  - `ll_fun::Function`: a function that computes the log likelihood of a single data point: \n    f(θ1, ..., θn, data), where θi is the ith parameter\n  - `chain::Chain`: a chain object from MCMCChains\n  - `data`: a vector of data used to estimate parameters of the model\n  - `args...`: Positional arguments to be passed to [`psis`](@ref).\n  - `chain_index::Vector`: A vector of integers specifying which chain each iteration belongs to. For\n    instance, `chain_index[iteration]` should return `2` if `log_likelihood[:, step]`\n    belongs to the second chain.\n  - `kwargs...`: Keyword arguments to be passed to [`psis`](@ref).\n\nSee also: [`psis`](@ref), [`loo`](@ref), [`PsisLoo`](@ref).\n\"\"\"\nfunction psis_loo(\n    ll_fun::Function, chain::Chains, data, args...;\n    source::Union{AbstractString,Symbol}=\"mcmc\", log_weights::Bool=false, kwargs...\n    )\n    pointwise_log_likes = pointwise_log_likelihoods(ll_fun, chain, data)\n    return psis_loo(pointwise_log_likes, args...; source, log_weights, kwargs...)\nend\n\n\"\"\"\n    psis(\n        ll_fun::Function, \n        chain::Chains,\n        data; \n        source::String=\"mcmc\", \n        log_weights::Bool=false\n    ) -> Psis\n\nImplements Pareto-smoothed importance sampling (PSIS) based on MCMCChain object.\n\n# Arguments\n## Positional Arguments\n- `ll_fun::Function`: a function that computes the log likelihood of a single data point: \nf(θ1, ..., θn, data), where θi is the ith parameter\n- `chain::Chain`: a chain object from MCMCChains\n- `data`: a vector of data used to estimate parameters of the model\n- `r_eff::AbstractArray{T}`: An (optional) vector of relative effective sample sizes used \nin ESS calculations. If left empty, calculated automatically using the FFTESS method \nfrom InferenceDiagnostics.jl. See `relative_eff` to calculate these values. \n\n## Keyword Arguments\n\n- `chain_index::Vector{Integer}`: An (optional) vector of integers indicating which chain \neach sample belongs to.\n- `source::String=\"mcmc\"`: A string or symbol describing the source of the sample being \nused. If `\"mcmc\"`, adjusts ESS for autocorrelation. Otherwise, samples are assumed to be \nindependent. Currently permitted values are $SAMPLE_SOURCES.\n- `log_weights::Bool=false`: Return log weights, rather than the PSIS weights. \n\"\"\"\nfunction psis(\n    ll_fun::Function, chain::Chains, r_eff;\n    source::Union{AbstractString,Symbol}=\"mcmc\", log_weights::Bool=false\n    )\n    pointwise_log_likes = pointwise_log_likelihoods(ll_fun, chain, data)\n    return psis(-pointwise_log_likes, r_eff; source, log_weights)\nend\n\nfunction psis(\n    ll_fun::Function, chain::Chains, data;\n    source::Union{AbstractString,Symbol}=\"mcmc\", log_weights::Bool=false\n    )\n    pointwise_log_likes = pointwise_log_likelihoods(ll_fun, chain, data)\n    r_eff = similar(pointwise_log_likes, 0)\n    return psis(-pointwise_log_likes, r_eff; source, log_weights)\nend\n"
        }
    ]
}